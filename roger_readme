ОС - Debian
Версия ОС - Debian 10.0
Гипервизор - VirtualBox
Контрольная сумма образа диска - later

———————————————————————

Пользователи:
1. Root - mkeel
2. Pass - 123;
3. Non-root user - m_roger;
4. Pass - 123;

———————————————————————

Разделы жесткого диска :

1. На / раздел размером 4.2 Gb;
2. На /home раздел размером 3.0 Gb;
3. На подкачке 1.1 Gb;

———————————————————————

Изначально при установке системы делаем себя рутом:

su -

———————————————————————

Установка основных компонентов для реализации проекта.
Под root вводим ->>>>   apt-get install vim sudo fail2ban portsentry mailutils -y

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Параметр -y значит - Загрузка без запроса пароля.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Vim - текстовый редактор;
sudo - рут;
fail2ban - сервис для отслеживания log-файлов запущенных программ, и в зависимости от ситуации блокирует по IP вредителей.
portsentry - средство для обнаружения сканирования портов и реагирование на подобные обнаружения.
mailutils - стандартные средства почты
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

———————————————————————

В файле /etc/sudoers вписываем себя под строкой root, добавляя NOPASSWD, запись будет иметь следующий вид - m_roger ALL=(ALL:ALL) NOPASSWD:ALL
(NOPASSWD - чтобы при исп. sudo, система не запрашивала каждый раз пароль)

———————————————————————

ПО САБЖУ:

1. Добавить non-root пользователя

Изначально при установке системы был добавлен Non-root пользователь, но все равно создадим его:

adduser m_roger
adduser m_roger sudo

———————————————————————

2. Использовать sudo

Установка sudo через apt-get install sudo

——————————————————————

3. Отключить DHCP сервис, установить статический IP адрес и установить маску подсети /30

В настройках сети виртуальной машины(Virtual Box) установить тип подключения через мост, чтобы получить нормальный айпишник и виртуалка была как отдельная машина в локальной сети.

Файл /etc/network/interfaces привести к виду :

#iface enp0s3 inet dhcp
iface enp0s3 inet static
address 192.168.20.9
netmask 255.255.255.252
gateway 192.168.20.1
auto enp0s3

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
iface enp0s3 inet static - назначаем статический адрес для интерфейса enp0s3;
address - IP адрес, который можно узнать выполнив команду ifconfig;
netmask - маской подсети называется битовая маска, которая позволяет определить какая часть IP адреса узла сети относится к адресу сети, а какая к адресу самого узла в этой сети.
gateway - шлюз по умолчанию, пакет отправляется на него в том случае, если маршрут к сети назначения не известен(иными словами, если пакет был направлен не участнику локальной сети, то он направляется в шлюз и там уже направляется на следующий шлюз по умолчанию, который прописан в маршрутизаторе, и так до тех пор, пока пакет не будет доставлен, ну или не достигнет точки назначения).
auto enp0s3 - старт интерфейса при загрузке системы;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
—————————————————————

4. Смена дефолтного порта SSH-протокола

Для этого в файле /etc/ssh/sshd_config необходимо раскомментировать поле port и сменить 22 на свободный порт(в моем случае 2222)

——————————————————————

5. Доступ по SSH-протоколу должен осуществляться по RSA ключам. Подключение по SSH от рут прав не должны быть разрешены напрямую, но должны быть разрешены пользователям с root правами.

Чтобы подключиться к виртуальной машине с мака, необходимо на маке создать rsa ключи командой - ssh-keygen -t rsa, затем их перекинуть на виртуальную машину, введя команду - ssh-copy-id -i ~/.ssh/id_rsa.pub mkeel@192.168.20.9 -p 2222

Чтобы решить вторую проблему, необходимо в том же файле - /etc/ssh/sshd_config раскомментировать поле PermitRootLogin и поменять на “no”.
Также сразу в файле /etc/ssh/sshd_config убрать запрос пароля при аутентификации - PasswordAuthentication “no” и PubKeyAuthentication “no”.

sudo systemctl restart sshd для перезагрузки сервиcа

—————————————————————

6 - 8(включительно). См. Файл IPTABLES RULES

Установить fail2ban и portsentry
Настройка portsentry - http://www.smeegul.kiev.ua/portsentry.html
—————————————————————

9. Остановить все ненужные сервисы

sudo systemctl disable printer.target
sudo systemctl disable ctrl-alt-del.target
sudo systemctl disable systems-boot-check-no-failures.service
sudo systemctl disable keyboard-setup.sh
sudo systemctl disable console-setup.sh

—————————————————————

10. Создать скрипт, который  обновляет все пакеты и записывает логи в /var/log/update_script.log. Создать задание по расписанию с этом скриптом, который исполняется раз в неделю в 4 утра и каждый раз при загрузке машины.

Для начала нужно создать сам скрипт, который будет обновлять пакеты, выглядит он следующим образом:
#!/bin/bash
sudo apt-get update -y >>/var/log/update_script.log && sudo apt-get upgrade -y >>/var/log/update_script.log

Далее в файле crontab(sudo crontab -e) необходимо написать правила исполнения написанного скрипта:
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
@root sudo /home/mkeel/update_script.sh
0 4 * * * 1 sudo /home/mkeel/update_script.sh
-----------------------------------------------------------------------------------------------------------------------------------------
SHELL=/bin/bash - среда исполнения скриптов.
PATH=/sbin:/bin:/usr/sbin:/usr/bin - переменная PATH определяет пути, используемые для выполнения команд

* * * * * Команда, которая будет выполнена
- - - - -
| | | | |
| | | | - День недели (0 - 7) (воскресенье = 0 или 7)
| | | --- Месяц (1 - 12)
| | --- День месяца (1 - 31)
| ---- Час (0 - 23)
----- Минута (0 - 59)
-----------------------------------------------------------------------------------------------------------------------------------------
—————————————————————

11. Создать скрипт, который проверяет изменения файла /etc/crontab и отправляемом почту на рута если он был изменен. Создайте задачу по расписанию каждый день в полночь.

Создадим скрипт - его содержимое:

#!/bin/bash
cat /etc/crontab > /home/mkeel/checksum
CHECKSUM=/home/mkeel/checksum
TEMP=/home/mkeel/temp
DIFF=$(diff $CHECKSUM $TEMP)
if [ ! -f $TEMP ]; then
	cat $CHECKSUM > $TEMP
	exit 0;
fi;
if [ "$DIFF" != "" ]; then
	echo “Crontab was modified !!!” | mail -s “Changing crontab !!!” root
	sudo rm -rf $TEMP
	cat $CHECKSUM > $TEMP
fi;

Далее sudo crontab -e и добавляем под последней записью следующую запись - 0 0 * * * sudo /home/mkeel/cronVerifySum.sh 
—————————————————————

SSL Certificate

Устанавливаем веб-сервер: sudo apt-get install nginx

sudo systemctl start nginx
sudo systemctl enable nginx

Далее создаем директорию ssl для того, чтобы сохранить SSL сертификат - mkdir -p /etc/nginx/ssl

-----------------------------------------------------------------------------------------------------------------------------------------
Флаг -р указывает оболочке, чтобы она создавала новые каталоги если их не существует в указанном пути.
-----------------------------------------------------------------------------------------------------------------------------------------

******Права доступа Владельца к директории на чтение, запись и исполнение файлов в этой директории: sudo chmod 700 /etc/nginx/ssl/******

Создание SSL сертификата : sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt

-----------------------------------------------------------------------------------------------------------------------------------------
	•	openssl: базовый инструмент командной строки для создания и управления сертификатами, ключами и другими файлами OpenSSL.
	•	req: эта подкоманда указывает, что на данном этапе нужно использовать запрос на подпись сертификата X.509 (CSR). X.509 – это стандарт инфраструктуры открытого ключа, которого придерживаются SSL и TLS при управлении ключами и сертификатами. То есть, данная команда позволяет создать новый сертификат X.509.
	•	—x509: данная опция вносит поправку в предыдущую субкоманду, сообщая утилите о том, что вместо запроса на подписание сертификата необходимо создать самоподписанный сертификат.
	•	—nodes: говорит OpenSSL пропустить опцию защиты сертификата парольной фразой. Нужно, чтобы при запуске сервер Nginx имел возможность читать файл без вмешательства пользователя. Установив пароль, придется вводить его после каждой перезагрузки.
	•	—days 365: эта опция устанавливает срок действия сертификата (как видите, в данном случае сертификат действителен в течение года).
	•	—newkey rsa:2048: эта опция позволяет одновременно создать новый сертификат и новый ключ. Поскольку ключ, необходимый для подписания сертификата, не был создан ранее, нужно создать его вместе с сертификатом. Данная опция создаст ключ RSA на 2048 бит.
	•	—keyout: эта опция сообщает OpenSSL, куда поместить сгенерированный файл ключа.
	•	—out: сообщает OpenSSL, куда поместить созданный сертификат.
-----------------------------------------------------------------------------------------------------------------------------------------

По следующему пути создать файл - /etc/nginx/conf.d/ssl.conf и написать в нем:
server {
	listen 443 http2 ssl;
	listen [::]:443 http2 ssl;
	root /var/www/mypage.com/html;
	index index.html;
	
	ssl_certificate /etc/nginx/ssl/nginx.crt;
	ssl_certificate_key /etc/nginx/ssl/nginx.key;
}

В файле /etc/nginx/sites-available/default изменяем root /var/www/mypage.com/html;

Далее в /var/www/ создаем директорию mypage.com/html и помещаем туда файл index.html

В файле index.html пишем свою страницу на HTML,CSS и пр.

sudo service nginx start
sudo service nginx reload

Далее в браузере пробуем ввести ip адрес виртуальной машины и подключиться по HTTPS соединению, вылезет предупреждение, выбираем что-то связанное с “Войти на сайт”, далее вводим свой пароль.

DEPLOYMENT PART

Сначала создаем index.html и наполняем его чем нибудь(это будет отражаться на нашей странице).

Далее этот файл надо закинуть на личный гит репозиторий.


Создаем скрипт, который будет клонить гит репозиторий с файлом index.html, затем копировать этот файл в директорию откуда веб-сервер nginx подгружает html’ки.
#!/bin/bash
sudo apt-get install git -y
git clone “здесь ссылка на Ваш репозиторий” “Имя_директории”
cp /home/“имя пользователя”/“имя_директории”/index.html /var/www/mypage.com/html
rm -rf /home/“имя пользователя”/“имя_директории”
sudo apt-get remove git -y sudo apt-get purge git -y